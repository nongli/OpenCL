#include "context.h"

#define ADD_CASE(ERROR) \
  case CL_##ERROR: return #ERROR
const char* Error(cl_int err) {
  switch (err) {
   ADD_CASE(BUILD_PROGRAM_FAILURE);
   ADD_CASE(COMPILER_NOT_AVAILABLE);
   ADD_CASE(DEVICE_NOT_AVAILABLE);
   ADD_CASE(DEVICE_MAX_WRITE_IMAGE_ARGS);
   ADD_CASE(IMAGE_FORMAT_MISMATCH);
   ADD_CASE(IMAGE_FORMAT_NOT_SUPPORTED);
   ADD_CASE(INVALID_ARG_INDEX);
   ADD_CASE(INVALID_ARG_SIZE);
   ADD_CASE(INVALID_ARG_VALUE);
   ADD_CASE(INVALID_BINARY);
   ADD_CASE(INVALID_BUFFER_SIZE);
   ADD_CASE(INVALID_BUILD_OPTIONS);
   ADD_CASE(INVALID_COMMAND_QUEUE);
   ADD_CASE(INVALID_CONTEXT);
   ADD_CASE(INVALID_DEVICE);
   ADD_CASE(INVALID_DEVICE_TYPE);
   ADD_CASE(INVALID_EVENT);
   ADD_CASE(INVALID_EVENT_WAIT_LIST);
   ADD_CASE(INVALID_GL_OBJECT);
   ADD_CASE(INVALID_GLOBAL_OFFSET);
   ADD_CASE(INVALID_HOST_PTR);
   ADD_CASE(INVALID_IMAGE_FORMAT_DESCRIPTOR);
   ADD_CASE(INVALID_IMAGE_SIZE);
   ADD_CASE(INVALID_KERNEL);
   ADD_CASE(INVALID_KERNEL_ARGS);
   ADD_CASE(INVALID_KERNEL_DEFINITION);
   ADD_CASE(INVALID_KERNEL_NAME);
   ADD_CASE(INVALID_MEM_OBJECT);
   ADD_CASE(INVALID_OPERATION);
   ADD_CASE(INVALID_PLATFORM);
   ADD_CASE(INVALID_PROGRAM);
   ADD_CASE(INVALID_PROGRAM_EXECUTABLE);
   ADD_CASE(INVALID_QUEUE_PROPERTIES);
   ADD_CASE(INVALID_SAMPLER);
   ADD_CASE(INVALID_VALUE);
   ADD_CASE(INVALID_WORK_DIMENSION);
   ADD_CASE(INVALID_WORK_GROUP_SIZE);
   ADD_CASE(INVALID_WORK_ITEM_SIZE);
   ADD_CASE(MAP_FAILURE);
   ADD_CASE(MEM_OBJECT_ALLOCATION_FAILURE);
   ADD_CASE(MEM_COPY_OVERLAP);
   ADD_CASE(OUT_OF_HOST_MEMORY);
   ADD_CASE(OUT_OF_RESOURCES);
   ADD_CASE(PROFILING_INFO_NOT_AVAILABLE);
   ADD_CASE(SUCCESS);
   default: return "Unknown";
  }
}

